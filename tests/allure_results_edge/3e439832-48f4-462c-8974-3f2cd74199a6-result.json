{"name": "Check work of telegram page", "status": "failed", "statusDetails": {"message": "AssertionError: Element //a[@aria-label=\"telegram\"] is not clickable", "trace": "self = <elements.footer_element.FooterElement object at 0x000001AE713754D0>\nlocator = '//a[@aria-label=\"telegram\"]'\n\n    def wait_for_visible(self, locator):\n        try:\n>           return WebDriverWait(self.driver, self.WAIT_UNTIL).until(EC.element_to_be_clickable((By.XPATH, locator)))\n\n..\\helpers\\base.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3bb45ae4cfc445bd7955ac8136b78fe2\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001AE7131FC40>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"3bb45ae4cfc445bd7955ac8136b78fe2\")>\n\n    def _predicate(driver):\n        target = mark\n        if not isinstance(target, WebElement):  # if given locator instead of WebElement\n            target = driver.find_element(*target)  # grab element at locator\n>       target = visibility_of(target)(driver)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:355: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n_ = <selenium.webdriver.edge.webdriver.WebDriver (session=\"3bb45ae4cfc445bd7955ac8136b78fe2\")>\n\n    def _predicate(_):\n>       return _element_if_visible(element)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:168: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = <selenium.webdriver.remote.webelement.WebElement (session=\"3bb45ae4cfc445bd7955ac8136b78fe2\", element=\"B341E7B39F266FF75ADDB8C1FD2D58E6_element_4\")>\nvisibility = True\n\n    def _element_if_visible(element: WebElement, visibility: bool = True) -> Union[WebElement, bool]:\n>       return element if element.is_displayed() == visibility else False\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"3bb45ae4cfc445bd7955ac8136b78fe2\", element=\"B341E7B39F266FF75ADDB8C1FD2D58E6_element_4\")>\n\n    def is_displayed(self) -> bool:\n        \"\"\"Whether the element is visible to a user.\"\"\"\n        # Only go into this conditional for browsers that don't use the atom themselves\n        if isDisplayed_js is None:\n            _load_js()\n>       return self.parent.execute_script(f\"/* isDisplayed */return ({isDisplayed_js}).apply(null, arguments);\", self)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:251: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.edge.webdriver.WebDriver (session=\"3bb45ae4cfc445bd7955ac8136b78fe2\")>\nscript = '/* isDisplayed */return (function(){return (function(){var k=this||self;function aa(a){return\"string\"==typeof a}funct...ow.navigator:null,document:typeof window!=\\'undefined\\'?window.document:null}, arguments);}\\n).apply(null, arguments);'\nargs = (<selenium.webdriver.remote.webelement.WebElement (session=\"3bb45ae4cfc445bd7955ac8136b78fe2\", element=\"B341E7B39F266FF75ADDB8C1FD2D58E6_element_4\")>,)\nconverted_args = [<selenium.webdriver.remote.webelement.WebElement (session=\"3bb45ae4cfc445bd7955ac8136b78fe2\", element=\"B341E7B39F266FF75ADDB8C1FD2D58E6_element_4\")>]\ncommand = 'w3cExecuteScript'\n\n    def execute_script(self, script, *args):\n        \"\"\"Synchronously Executes JavaScript in the current window/frame.\n    \n        :Args:\n         - script: The JavaScript to execute.\n         - \\\\*args: Any applicable arguments for your JavaScript.\n    \n        :Usage:\n            ::\n    \n                driver.execute_script('return document.title;')\n        \"\"\"\n        if isinstance(script, ScriptKey):\n            try:\n                script = self.pinned_scripts[script.id]\n            except KeyError:\n                raise JavascriptException(\"Pinned script could not be found\")\n    \n        converted_args = list(args)\n        command = Command.W3C_EXECUTE_SCRIPT\n    \n>       return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:404: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.edge.webdriver.WebDriver (session=\"3bb45ae4cfc445bd7955ac8136b78fe2\")>\ndriver_command = 'w3cExecuteScript'\nparams = {'args': [{'element-6066-11e4-a52e-4f735466cecf': 'B341E7B39F266FF75ADDB8C1FD2D58E6_element_4'}], 'script': '/* isDisp...w.navigator:null,document:typeof window!=\\'undefined\\'?window.document:null}, arguments);}\\n).apply(null, arguments);'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001AE6FF74A10>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...EB2B31+214353]\\\\n\\\\tBaseThreadInitThunk [0x00007FF827177344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF8273E26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: MicrosoftEdge=119.0.2151.44); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6DCF35462+60322]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6DCEBA412+245298]\nE       \t(No symbol) [0x00007FF6DCC89CE9]\nE       \t(No symbol) [0x00007FF6DCC8ECBD]\nE       \t(No symbol) [0x00007FF6DCC91512]\nE       \t(No symbol) [0x00007FF6DCD161E6]\nE       \t(No symbol) [0x00007FF6DCCFBADA]\nE       \t(No symbol) [0x00007FF6DCCCD7A6]\nE       \t(No symbol) [0x00007FF6DCD15171]\nE       \t(No symbol) [0x00007FF6DCCFB8B3]\nE       \t(No symbol) [0x00007FF6DCCCC5C3]\nE       \t(No symbol) [0x00007FF6DCCCB9D3]\nE       \t(No symbol) [0x00007FF6DCCCCD54]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6DD112084+1154308]\nE       \t(No symbol) [0x00007FF6DCD4E656]\nE       \tMicrosoft::Applications::Events::EventProperty::clear [0x00007FF6DCE10AD3+36579]\nE       \tMicrosoft::Applications::Events::EventProperty::clear [0x00007FF6DCE089FD+3597]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6DD110DC4+1149508]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6DCEC3DC8+284648]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6DCEBFB54+267636]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6DCEBFC82+267938]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6DCEB2B31+214353]\nE       \tBaseThreadInitThunk [0x00007FF827177344+20]\nE       \tRtlUserThreadStart [0x00007FF8273E26B1+33]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"3bb45ae4cfc445bd7955ac8136b78fe2\")>\nopen_main_page = None\n\n    @allure.title('Check work of telegram page')\n    def test_telegram(driver, open_main_page):\n        footer = FooterElement(driver)\n>       footer.click_on_telegram()\n\ntest_footer.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\elements\\footer_element.py:31: in click_on_telegram\n    self.click_on(self.TELEGRAM_LOCATOR)\n..\\helpers\\base.py:25: in click_on\n    element = self.wait_for_visible(locator)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <elements.footer_element.FooterElement object at 0x000001AE713754D0>\nlocator = '//a[@aria-label=\"telegram\"]'\n\n    def wait_for_visible(self, locator):\n        try:\n            return WebDriverWait(self.driver, self.WAIT_UNTIL).until(EC.element_to_be_clickable((By.XPATH, locator)))\n        except WebDriverException:\n>           assert False, f\"Element {locator} is not clickable\"\nE           AssertionError: Element //a[@aria-label=\"telegram\"] is not clickable\n\n..\\helpers\\base.py:19: AssertionError"}, "steps": [{"name": "Click on telegram page", "status": "failed", "statusDetails": {"message": "AssertionError: Element //a[@aria-label=\"telegram\"] is not clickable\n", "trace": "  File \"C:\\Users\\dronedoom\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\dronedoom\\PycharmProjects\\final_diploma_project\\elements\\footer_element.py\", line 31, in click_on_telegram\n    self.click_on(self.TELEGRAM_LOCATOR)\n  File \"C:\\Users\\dronedoom\\PycharmProjects\\final_diploma_project\\helpers\\base.py\", line 25, in click_on\n    element = self.wait_for_visible(locator)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\dronedoom\\PycharmProjects\\final_diploma_project\\helpers\\base.py\", line 19, in wait_for_visible\n    assert False, f\"Element {locator} is not clickable\"\n"}, "start": 1699175304308, "stop": 1699175307688}], "attachments": [{"name": "stdout", "source": "8b3d1e6f-5acd-405d-9fc8-fc3370106c19-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "__pytest_repeat_step_number", "value": "0"}], "start": 1699175304308, "stop": 1699175307691, "uuid": "38f5e6fc-81ad-492b-bbce-f0ae0cf26f42", "historyId": "57a6a1cddcf92d85f491eac66f50aaff", "testCaseId": "46d4b208c6d8fb8549717ae4d2acdcd4", "fullName": "test_footer#test_telegram", "labels": [{"name": "suite", "value": "test_footer"}, {"name": "host", "value": "DESKTOP-B0NKR1I"}, {"name": "thread", "value": "23664-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_footer"}]}